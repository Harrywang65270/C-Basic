C语言 --- 面向过程的程序设计思想
自顶向下，逐步求精
一个main函数+若干子函数


C++语言 --- 面向对象的程序设计思想
实现软件设计的产业化
自然界是由实体（对象）组成的；

（1） 抽象： 对具体对象（问题）进行概括，抽出这一类对象的公共性质并加以描述的过程。
数据抽象
行为抽象

（2） 封装： 将抽象出的数据成员，行为成员相结合，将他们视为一个整体 --- 类
使用者不需要了解具体的实现细节，只需要通过接口使用类的成员即可。

（3） 继承与派生：
保持原有特性的基础上，进行更具体的说明。

类（class）使用户自定义数据类型。如果程序中要使用类类型（class type），必须根据实际需要定义，
或者使用以设计好的类。

C++定义一个类，其方法与定义一个结构体是相似的，一般形式为：

class 类名{ //类体
    成员列表
}；

对类的成员进行访问，来自两个访问源： 类成员和类用户。

类成员指类本身的成员函数，类用户指类外部的使用者，包括全局函数，另一个类的成员函数。


在类中声明数据成员

class Cube { // Cube类表示立方体
... // 其他成员
    long color;
    double x,y,z,side; //数据成员
}

类的数据成员可以是基本类型，数组，指针，引用，共用体，枚举类型，void指针， const限定等数据类型
class ADT{
   long color;
   double x,y,z,side;
   int a[10];
   char *s;
   char &r;
   void *p; // void指针
}


类的数据成员还可以是成员对象 （member object），即类类型或结构体类型的对象。若类A中
嵌入了类B的对象，称这个对象为子对象（subobject）。


类的成员函数

class Data { //Data类定义
public:
   void set(int d); //成员函数原型声明
   int get(){  //成员函数定义
        return data;
    } // get 函数定义结束
private:
   int data; //数据成员
}；  //Data类定义结束

void Data::set(int d)
{
     data = d 
}
